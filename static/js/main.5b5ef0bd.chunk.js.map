{"version":3,"sources":["components/BarChart/BarChart.js","App.js","serviceWorker.js","index.js"],"names":["BarChart","this","drawChart","dataset","props","padding","w","width","h","height","xScale","d3","domain","d","range","yScale","xAxis","yAxis","maxX","minX","console","log","concat","svg","id","append","attr","selectAll","data","enter","i","call","react_default","a","createElement","Component","App","state","className","components_BarChart_BarChart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAqFeA,qMA7EXC,KAAKC,gDAIL,IAAMC,EAAUF,KAAKG,MAAMD,QACrBE,EAAUJ,KAAKG,MAAMC,QAErBC,EAAIL,KAAKG,MAAMG,MACfC,EAAIP,KAAKG,MAAMK,OAEfC,EAASC,MACZC,OAAO,CAAC,EAAGD,IAAOR,EAAS,SAACU,GAAD,OAAOA,MAClCC,MAAM,CAACT,EAASC,EAAID,IAEjBU,EAASJ,MACZC,OAAO,CAAC,EAAGD,IAAOR,EAAS,SAACU,GAAD,OAAOA,MAClCC,MAAM,CAACN,EAAIH,EAASA,IAEjBW,EAAQL,IAAcD,GACtBO,EAAQN,IAAYI,GAEpBG,EAAOP,IAAOR,EAAS,SAACU,GAAD,OAAOA,IAC9BM,EAAOR,IAAOR,EAAS,SAACU,GAAD,OAAOA,IACpCO,QAAQC,IAAR,UAAAC,OAAsBH,IACtBC,QAAQC,IAAR,UAAAC,OAAsBJ,IAGtB,IAAMK,EAAMZ,IAAU,QAAUV,KAAKG,MAAMoB,GAAK,MAC7CC,OAAO,OACPC,KAAK,QAASpB,GACdoB,KAAK,SAAUlB,GAGlBe,EAAII,UAAU,QACXC,KAAKzB,GACL0B,QACAJ,OAAO,QACPC,KAAK,IAAK,SAACb,EAAGiB,GAAJ,OAAUzB,EAAc,GAAJyB,IAC9BJ,KAAK,IAAK,SAACb,EAAGiB,GAAJ,OAAWtB,EAAEH,EAAW,GAAKQ,IACvCa,KAAK,QAAS,IACdA,KAAK,SAAU,SAACb,EAAGiB,GAAJ,OAAc,GAAJjB,IACzBa,KAAK,QAAS,OACdA,KAAK,YAAa,cAClBA,KAAK,WAAY,UAYpBH,EAAIE,OAAO,KACRC,KAAK,KAAM,UACXA,KAAK,YAAa,gBAAkBlB,EAAIH,GAAW,KACnDqB,KAAK,QAAS,QACdK,KAAKf,GAGRO,EAAIE,OAAO,KACRC,KAAK,KAAM,UACXA,KAAK,YAAa,aAAerB,EAAU,OAC3CqB,KAAK,QAAS,QACdK,KAAKd,oCAKR,OAAOe,EAAAC,EAAAC,cAAA,OAAKV,GACVvB,KAAKG,MAAMoB,IADN,YA1EYW,cCyCRC,6MAvCbC,MAAQ,CAENlC,QAAS,CAAC,GAAI,EAAG,EAAG,EAAG,EAAG,IAc1BI,MAAO,IACPE,OAAQ,IACRe,GAAI,QACJnB,QAAS,4EAIT,OACE2B,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OAEbN,EAAAC,EAAAC,cAACK,EAAD,CACEpC,QAASF,KAAKoC,MAAMlC,QACpBI,MAAON,KAAKoC,MAAM9B,MAClBE,OAAQR,KAAKoC,MAAM5B,OACnBe,GAAIvB,KAAKoC,MAAMb,GACfnB,QAASJ,KAAKoC,MAAMhC,kBAjCZ8B,aCOEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5b5ef0bd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nimport './BarChart.css';\n\nclass BarChart extends Component {\n\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  drawChart() {\n    const dataset = this.props.dataset;\n    const padding = this.props.padding;\n\n    const w = this.props.width;\n    const h = this.props.height;\n\n    const xScale = d3.scaleLinear()\n      .domain([0, d3.max(dataset, (d) => d)])\n      .range([padding, w - padding]);\n\n    const yScale = d3.scaleLinear()\n      .domain([0, d3.max(dataset, (d) => d)])\n      .range([h - padding, padding]);\n\n    const xAxis = d3.axisBottom(xScale);\n    const yAxis = d3.axisLeft(yScale);\n\n    const maxX = d3.max(dataset, (d) => d);\n    const minX = d3.min(dataset, (d) => d);\n    console.log(`minX : ${minX}`);\n    console.log(`maxX : ${maxX}`);\n\n    // Create my SVG\n    const svg = d3.select('[id=\"' + this.props.id + '\"]')\n      .append(\"svg\")\n      .attr(\"width\", w)\n      .attr(\"height\", h);\n\n    // Create my Rectangles\n    svg.selectAll(\"rect\")\n      .data(dataset)\n      .enter()\n      .append(\"rect\")\n      .attr(\"x\", (d, i) => padding + i * 70)\n      .attr(\"y\", (d, i) => (h-padding) - 10 * d)\n      .attr(\"width\", 30)\n      .attr(\"height\", (d, i) => d * 10)\n      .attr(\"class\", \"bar\")\n      .attr(\"data-date\", \"07/01/2019\")\n      .attr(\"data-gdp\", \"10,000\");\n\n    // svg.selectAll(\"text\")\n    //   .data(dataset)\n    //   .enter()\n    //   .append(\"text\")\n    //   .text((d) => d)\n    //   .attr(\"x\", (d, i) => i * 70)\n    //   .attr(\"y\", (d, i) => h - (10 * d) - 3)\n\n    // Create my Axis in g (groups)\n    // X Axis\n    svg.append(\"g\")\n      .attr('id', 'x-axis')\n      .attr(\"transform\", \"translate(0,\" + (h - padding) + \")\")\n      .attr(\"class\", \"tick\")\n      .call(xAxis);\n\n    // Y Axis\n    svg.append(\"g\")\n      .attr('id', 'y-axis')\n      .attr(\"transform\", \"translate(\" + padding + \",0)\")\n      .attr(\"class\", \"tick\")\n      .call(yAxis);\n\n  }\n\n  render() {\n    return <div id = {\n      this.props.id\n    } > </div>\n  }\n}\n\nexport default BarChart;","import React, { Component } from 'react';\nimport './App.css';\n\nimport BarChart from './components/BarChart/BarChart';\n\nclass App extends Component {\n\n  state = {\n    // dataset for bar\n    dataset: [12, 5, 6, 6, 9, 10],\n    // dataset for circle\n    // dataset: [\n    //   [ 34,     78 ],\n    //   [ 109,   280 ],\n    //   [ 310,   120 ],\n    //   [ 79,   411 ],\n    //   [ 420,   220 ],\n    //   [ 233,   145 ],\n    //   [ 333,   96 ],\n    //   [ 222,    333 ],\n    //   [ 78,    320 ],\n    //   [ 21,   123 ]\n    // ],\n    width: 500,\n    height: 500,\n    id: 'title',\n    padding: 60\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n \n        <BarChart \n          dataset={this.state.dataset} \n          width={this.state.width} \n          height={this.state.height} \n          id={this.state.id}\n          padding={this.state.padding}\n        />\n  \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}