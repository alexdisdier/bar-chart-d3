{"version":3,"sources":["components/BarChart/BarChart.js","App.js","serviceWorker.js","index.js"],"names":["BarChart","this","drawChart","_this$props","props","dataset","id","w","width","h","height","barWidth","length","svgWrapper","d3","concat","append","attr","yearsDate","map","item","Date","xMax","xScale","domain","range","xAxis","call","style","text","gdpMax","d","yScale","yAxis","tooltip","overlay","selectAll","data","enter","i","on","transition","duration","html","toFixed","replace","react_default","a","createElement","Component","App","state","barData","padding","_this$state","className","components_BarChart_BarChart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13b651e3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\n\nimport \"./BarChart.css\";\n\nclass BarChart extends Component {\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  drawChart() {\n    const { dataset, id, width: w, height: h } = this.props;\n\n    const barWidth = w / dataset.length;\n    const padding = 60;\n\n    /**\n     * =======================================\n     * BUILD SVG CANVAS\n     * where the diagram will be placed.\n     */\n    const svgWrapper = d3\n      .select(`[id=${id}]`)\n      .append(\"svg\")\n      .attr(\"width\", w + 100)\n      .attr(\"height\", h + 60);\n\n    /**\n     * =======================================\n     * BUILD THE X-AXIS with labels\n     */\n    const yearsDate = dataset.map(item => new Date(item[0]));\n\n    const xMax = new Date(d3.max(yearsDate));\n\n    // maxDate.setMonth(maxDate.getMonth() + 3);\n\n    const xScale = d3\n      .scaleTime()\n      .domain([d3.min(yearsDate), xMax])\n      .range([0, w]);\n\n    const xAxis = d3.axisBottom(xScale);\n\n    /**\n     * Draw the X axis\n     */\n    svgWrapper\n      .append(\"g\")\n      .attr(\"id\", \"x-axis\")\n      .attr(\"transform\", `translate(${padding}, ${h})`)\n      .attr(\"class\", \"tick\")\n      .call(xAxis);\n\n    /**\n     * Add Y-axis legend\n     */\n    svgWrapper\n      .append(\"text\")\n      .attr(\"x\", w / 2 + 120)\n      .attr(\"y\", h + 50)\n      .style(\"font-size\", 12)\n      .text(\"More Information: http://www.bea.gov/national/pdf/nipaguid.pdf\");\n\n    /**\n     * =======================================\n     * BUILD THE Y-AXIS with labels\n     */\n\n    const gdpMax = d3.max(dataset, d => d[1]);\n\n    const yScale = d3\n      .scaleLinear()\n      .domain([0, gdpMax])\n      .range([h, 0]);\n\n    const yAxis = d3.axisLeft(yScale);\n\n    /**\n     * Draw the Y-axis\n     */\n    svgWrapper\n      .append(\"g\")\n      .attr(\"id\", \"y-axis\")\n      .attr(\"transform\", `translate(${padding},0)`)\n      .attr(\"class\", \"tick\")\n      .call(yAxis);\n\n    /**\n     * Add Y-axis legend\n     */\n    svgWrapper\n      .append(\"text\")\n      .attr(\"transform\", \"rotate(-90)\")\n      .attr(\"x\", -200)\n      .attr(\"y\", 80)\n      .style(\"font-size\", 12)\n      .text(\"Gross Domestic Product\");\n\n    /**\n     * =======================================\n     * BUILD THE BARS with tooltips\n     */\n\n    const tooltip = d3\n      .select(`#${id}`)\n      .append(\"div\")\n      .attr(\"id\", \"tooltip\")\n      .style(\"opacity\", 0);\n\n    var overlay = d3\n      .select(`#${id}`)\n      .append(\"div\")\n      .attr(\"class\", \"overlay\")\n      .style(\"opacity\", 0);\n\n    svgWrapper\n      .selectAll(\"rect\")\n      .data(dataset)\n      .enter()\n      .append(\"rect\")\n      .attr(\"x\", (d, i) => xScale(yearsDate[i]) + padding)\n      .attr(\"y\", d => yScale(d[1]))\n      .attr(\"width\", barWidth)\n      .attr(\"height\", d => h - yScale(d[1]))\n      .attr(\"class\", \"bar\")\n      .attr(\"data-date\", (d, i) => dataset[i][0])\n      .attr(\"data-gdp\", (d, i) => dataset[i][1])\n      // tooltip\n      .on(\"mouseover\", (d, i) => {\n        overlay\n          .transition()\n          .duration(0)\n          .style(\"height\", d + \"px\")\n          .style(\"width\", barWidth + \"px\")\n          .style(\"opacity\", 0.9)\n          .style(\"left\", i * barWidth + 0 + \"px\")\n          .style(\"top\", h - d + \"px\")\n          .style(\"transform\", \"translateX(60px)\");\n        tooltip\n          .transition()\n          .duration(200)\n          .style(\"opacity\", 0.9);\n        tooltip\n          .html(\n            dataset[i][0] +\n              \"<br/>\" +\n              \"$\" +\n              dataset[i][1].toFixed(1).replace(/(\\d)(?=(\\d{3})+\\.)/g, \"$1,\") +\n              \" Billion\"\n          )\n          .attr(\"data-date\", dataset[i][0])\n          .style(\"left\", i * barWidth + 30 + \"px\")\n          .style(\"top\", h - 100 + \"px\")\n          .style(\"transform\", \"translateX(60px)\");\n      })\n      .on(\"mouseout\", () => {\n        tooltip\n          .transition()\n          .duration(200)\n          .style(\"opacity\", 0);\n        overlay\n          .transition()\n          .duration(200)\n          .style(\"opacity\", 0);\n      });\n  }\n\n  render() {\n    return <div id={this.props.id}> </div>;\n  }\n}\n\nexport default BarChart;\n","import React, { Component } from \"react\";\nimport BarChart from \"./components/BarChart/BarChart\";\n\nimport barData from \"./fixtures/barData\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    dataset: barData.data,\n    width: 800,\n    height: 400,\n    id: \"title\",\n    padding: 60\n  };\n\n  render() {\n    const { dataset, width, height, id, padding } = this.state;\n    return (\n      <div className=\"App\">\n        <BarChart\n          dataset={dataset}\n          width={width}\n          height={height}\n          id={id}\n          padding={padding}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}